{"version":3,"sources":["ChatContext.js","ChatHandler.js","Youtube.js","Chatter.js","App.js","serviceWorker.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","chats","chatsReducer","state","action","heightReal","standardWidth","standardHeight","left","Math","random","top","type","concat","text","chat","Error","ChatsStateContext","createContext","ChatsDispatchContext","ChatProvider","children","useReducer","dispatch","Provider","value","ChatHandler","style","position","className","Youtube","context","useContext","useChatsState","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","title","src","frameBorder","allow","map","Chatter","setValue","useChatsDispatch","onSubmit","e","preventDefault","placeholder","onChange","target","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a7e35f4.chunk.js","sourcesContent":["import React, { useReducer, createContext, useContext } from 'react';\r\n\r\nexport function getWindowDimensions() {\r\n    const {innerWidth: width, innerHeight: height} = window;\r\n    return {\r\n        width,\r\n        height\r\n    }\r\n};\r\n\r\nconst chats = [];\r\n\r\nfunction chatsReducer (state, action) { \r\n    const {height, width} = getWindowDimensions();\r\n    const heightReal = height - 160;\r\n\r\n    const standardWidth = heightReal < (0.5625 * width) ? heightReal / 0.5625 : width;\r\n    const standardHeight = standardWidth * 0.5625;\r\n    const left = (heightReal < (0.5625 * width) ? (width-standardWidth)/2 : 0) + standardWidth * Math.random();\r\n    const top = 80 + standardHeight * Math.random();\r\n\r\n    switch (action.type) {\r\n        case 'CREATE':\r\n            \r\n            return state.concat({\r\n                text: action.chat,\r\n                left,\r\n                top,\r\n            });\r\n        default:\r\n            throw new Error(`Unhandled Action Type: ${action.type}`);\r\n    }\r\n}\r\n\r\nconst ChatsStateContext = createContext();\r\nconst ChatsDispatchContext = createContext();\r\n\r\nexport default function ChatProvider ({ children }) {\r\n    const [state, dispatch] = useReducer(chatsReducer, chats);\r\n\r\n    return (\r\n        <ChatsStateContext.Provider value={state}>\r\n            <ChatsDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </ChatsDispatchContext.Provider>\r\n        </ChatsStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useChatsState () {\r\n    const context = useContext(ChatsStateContext);\r\n    if (!context) {\r\n        throw new Error('Cannot find ChatsProvider');\r\n    }\r\n    return context;\r\n}\r\nexport function useChatsDispatch () {\r\n    const context = useContext(ChatsDispatchContext);\r\n    if (!context) {\r\n        throw new Error('Cannot find DispatchContext');\r\n    }\r\n    return context;\r\n}","import React from 'react';\r\nimport './ChatHandler.scss'\r\n\r\n\r\nfunction ChatHandler ({ children, left, top }) {\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top,\r\n        left\r\n    } \r\n    \r\n    return <div className=\"chat\" style={style}>{children}</div>;\r\n\r\n}\r\n\r\nexport default ChatHandler;","import React, { useState, useEffect } from 'react';\r\nimport './Youtube.scss'\r\nimport { getWindowDimensions } from './ChatContext'\r\nimport ChatHandler from './ChatHandler';\r\nimport { useChatsState } from './ChatContext';\r\n\r\n\r\nfunction useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n  \r\n    useEffect(() => {\r\n      function handleResize() {\r\n        setWindowDimensions(getWindowDimensions());\r\n      }\r\n  \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n  \r\n    return windowDimensions;\r\n}\r\n\r\nfunction Youtube() {\r\n\r\n    const state = useChatsState();\r\n\r\n    const {height, width} = useWindowDimensions();\r\n    const heightReal = height - 160;\r\n\r\n    const style = {\r\n        width: width,\r\n    }\r\n    if(heightReal < (0.5625 * width)) {\r\n        style.width = heightReal / 0.5625;\r\n    }\r\n\r\n    return (\r\n        <div className=\"video\" style={style}>\r\n            <div className=\"video-ratio\">\r\n                <iframe\r\n                    title=\"Youtube\"\r\n                    width=\"1903\" height=\"768\"\r\n                    src=\"https://www.youtube.com/embed/dccezgS8jf0\"\r\n                    frameBorder=\"0\" allow=\"autoplay; encrypted-media; gyroscope; picture-in-picture\">\r\n                </iframe>\r\n            </div>\r\n            {state.map(chat =>\r\n                <ChatHandler top={chat.top} left={chat.left}>\r\n                    {chat.text}\r\n                </ChatHandler>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Youtube;","import React, { useState } from 'react';\r\nimport './Chatter.scss';\r\nimport { useChatsDispatch } from './ChatContext';\r\n\r\nfunction Chatter() {\r\n\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useChatsDispatch();\r\n    \r\n    const onChange = e => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'CREATE',\r\n            chat: value\r\n        })\r\n        // THINGS TO DO AFTER SUBMIT\r\n        setValue('');\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"chatter-wrapper\">\r\n            <form onSubmit={onSubmit}>\r\n                <input placeholder=\"채팅을 입력하세요.\" onChange={onChange} value={value}/>\r\n                <button className=\"submit\" onClick={onSubmit}>전송</button>   \r\n            </form>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chatter;","import React from 'react';\nimport Youtube from './Youtube';\nimport Chatter from './Chatter';\nimport './App.scss';\nimport ChatProvider from './ChatContext';\n\nfunction App() {\n  return (\n    <>\n      <ChatProvider>\n        <header>\n          #함께 봐요&nbsp;&nbsp;&nbsp;&nbsp;#LCK\n        </header>\n        <Youtube />\n        <Chatter />\n      </ChatProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}